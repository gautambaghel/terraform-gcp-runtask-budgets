import json
import logging
import os
from time import sleep
from flask import escape
from flask import jsonify
import functions_framework
import google.cloud.logging
import logging
import hmac
import hashlib

# Setup google cloud logging and ignore errors
if "DISABLE_REMOTE_LOGGING" not in os.environ:
    try:
        client = google.cloud.logging.Client()
        client.setup_logging()
    except google.auth.exceptions.DefaultCredentialsError:
        pass

if "TFC_ORG" in os.environ:
    TFC_ORG = os.environ["TFC_ORG"]
else:
    TFC_ORG = False

if "WORKSPACE_PREFIX" in os.environ:
    WORKSPACE_PREFIX = os.environ["WORKSPACE_PREFIX"]
else:
    WORKSPACE_PREFIX = False

RUNTASK_STAGES = ["post_plan"]

if "HMAC_KEY" in os.environ:
    HMAC_KEY = os.environ["HMAC_KEY"]
    #logging.info("HMAC_KEY: " + os.environ["HMAC_KEY"])
else:
    HMAC_KEY = False

if 'LOG_LEVEL' in os.environ:
    logging.getLogger().setLevel(os.environ['LOG_LEVEL'])
    logging.info("LOG_LEVEL set to %s" % logging.getLogger().getEffectiveLevel())

@functions_framework.http
def request_handler(request):

    try:
        logging.info("headers: " + str(request.headers))
        logging.info("request_json: " + str(request.get_json(silent=True)))

        headers = request.headers
        request_json = request.get_json(silent=True)
        # request_args = request.args

        if not HMAC_KEY:
            msg = "HMAC key missing on server"
            logging.error(msg)
            verify = False

        elif request_json is None:
            msg = "JSON parameters missing in request"
            logging.warning(msg)
            verify = False

        elif headers is None:
            msg = "Headers missing in request"
            logging.warning(msg)
            verify = False

        elif "payload" not in request_json:
            msg = "Payload missing in request"
            logging.warning(msg)
            verify = False

        else:
            # Check JSON payload params
            payload = request_json["payload"]
            verify, msg = validate_request(headers, payload)

            # Check HMAC signature
            if verify:
                signature = headers['x-tfc-task-signature']
                if not validate_hmac(HMAC_KEY, str(payload), signature):
                    msg = "HMAC signature invalid"
                    logging.warning(msg)
                    verify = False

        if verify:
            status = 200
        else:
            status = 403

        response = {
            'statusCode': status,
            'body': {
                'status': msg
            }
        }

        logging.info(response)

        return jsonify(response)

    except Exception as e:
        logging.exception("Run Task Request error: {}".format(e))
        response = {
            'statusCode': 500,
            'body': {
                'status': "Internal Run Task Request error occurred"
            }
        }
        return jsonify(response)


def validate_request(headers, payload) -> (bool, str):
    """Validate request values"""

    verify = True
    msg = "OK"

    if "x-tfc-task-signature" not in headers:
        msg = "TFC Task signature missing"
        logging.warning(msg)
        verify = False

    elif payload["detail-type"] == "hashicorp-tfc-runtask":
        if TFC_ORG and payload["detail"]["organization_name"] != TFC_ORG:
            msg = "TFC Org verification failed : {}".format(payload["detail"]["organization_name"])
            logging.warning(msg)
            verify = False

        if WORKSPACE_PREFIX and not (str(payload["detail"]["workspace_name"]).startswith(WORKSPACE_PREFIX)):
            msg = "TFC workspace prefix verification failed : {}".format(payload["detail"]["workspace_name"])
            logging.warning(msg)
            verify = False

        if RUNTASK_STAGES and not (payload["detail"]["stage"] in RUNTASK_STAGES):
            msg = "TFC Runtask stage verification failed: {}".format(payload["detail"]["stage"])
            logging.warning(msg)
            verify = False

    return verify, msg


def validate_hmac(key: str, payload: str, signature: str) -> bool:
    """Returns true if the signature matches the SHA512 digest of the payload"""

    h = hmac.new(bytes(key, 'utf-8'), bytes(payload, 'utf-8'), hashlib.sha512)
    digest = h.hexdigest()
    result = hmac.compare_digest(digest, signature)

    if not result:
        logging.warning(f"HMAC mismatch, digest: {digest}, signature: {signature}")

    return result


